openapi: 3.1.0
info:
  title: AlphaForge Brain API (NVDA Integration Additions)
  version: 0.2.3
  description: >-
    Additive contract notes for NVDA 5-year dataset integration.
    Version 0.2.3 (finalized): formalizes exposure of data_hash, calendar_id, validation_summary and legacy alias `validation` (identical content for transition).
    Also documents optional anomaly_counters expansion when include_anomalies=true (purely additive, no breaking field removals). When the
    include_anomalies flag is provided the server guarantees `summary.anomaly_counters` is present (may be an empty object) for consistency.
servers:
  - url: http://localhost:8000
paths:
  /runs:
    post:
      summary: Create or reuse a backtest run (NVDA capable)
      description: >-
        Accepts an extended RunConfig referencing symbol "NVDA" which triggers dataset ingestion/validation.
      operationId: createRunNvda
      responses:
        '201': { description: Run created }
        '200': { description: Existing run reused }
  /runs/{run_hash}:
    get:
      summary: Get run detail (includes dataset linkage)
      operationId: getRunNvda
      parameters:
        - in: path
          name: run_hash
          required: true
          schema:
            type: string
        - in: query
          name: include_anomalies
          required: false
          schema:
            type: boolean
          description: When true, embed anomaly_counters into summary metrics (always present as object, possibly empty).
      responses:
        '200':
          description: Run detail with dataset metadata & optional anomaly counters
          content:
            application/json:
              example:
                run_id: "4f2c9b1e6d7a"
                run_hash: "4f2c9b1e6d7a"
                status: "SUCCEEDED"
                phase: "finalize"
                data_hash: "ab12cd34ef..."
                calendar_id: "NASDAQ"
                artifacts:
                  - name: "manifest.json"
                    sha256: "d41d8cd98f00b204e9800998ecf8427e"
                    size: 512
                  - name: "validation.json"
                    sha256: "3b5d5c3712955042212316173ccf37be"
                    size: 2048
                summary:
                  return_pct: 0.1234
                  sharpe: 1.87
                  anomaly_counters: {}
                validation_summary:
                  symbol: "NVDA"
                  data_hash: "ab12cd34ef..."
                  counters:
                    unexpected_gaps: 0
                    duplicates_dropped: 0
                  unexpected_gaps: 0
                  expected_closures: 569
                  observed_bar_seconds: 86400
                  declared_bar_seconds: 86400
                  timeframe_ok: true
                validation:
                  symbol: "NVDA"
                  data_hash: "ab12cd34ef..."
                  counters:
                    unexpected_gaps: 0
                    duplicates_dropped: 0
                  unexpected_gaps: 0
                  expected_closures: 569
                  observed_bar_seconds: 86400
                  declared_bar_seconds: 86400
                  timeframe_ok: true
  /runs/{run_hash}/artifacts:
    get:
      summary: List artifact manifest (includes data_hash & calendar)
      operationId: listArtifactsNvda
  /runs/{run_hash}/events:
    get:
      summary: Fetch buffered run events (unchanged)
      operationId: streamRunEventsNvda
  /runs/{run_hash}/events/stream:
    get:
      summary: Long-lived incremental run events stream (unchanged)
      operationId: streamRunEventsIncrementalNvda
components:
  schemas:
    RunConfig:
      description: NVDA extension of base RunConfig adding canonical timeframe enum constraints.
      allOf:
        - $ref: '../../001-initial-dual-tier/contracts/openapi.yaml#/components/schemas/RunConfig'
        - type: object
          description: NVDA integration does not alter required fields; ingestion resolves data_hash internally. Adds explicit timeframe enum constraints.
          properties:
            timeframe:
              type: string
              description: Canonical timeframe string.
              enum: ["1m","5m","15m","30m","1h","2h","4h","1d"]
    RunDetail:
      description: NVDA extension of base RunDetail with dataset provenance and validation summary alias fields.
      allOf:
        - $ref: '../../001-initial-dual-tier/contracts/openapi.yaml#/components/schemas/RunDetail'
        - type: object
          description: Extends base RunDetail with dataset provenance (data_hash, calendar_id) and lightweight validation summaries.
          properties:
            data_hash:
              type: string
              description: Canonical sha256 of normalized dataset used.
            calendar_id:
              type: string
              description: Exchange calendar identifier applied during ingestion.
            validation_summary:
              type: object
              description: Lightweight anomaly & integrity counters (subset of validation.json artifact).
              properties:
                symbol: { type: string }
                data_hash: { type: string }
                counters:
                  $ref: '#/components/schemas/AnomalyCounters'
                unexpected_gaps: { type: integer }
                expected_closures: { type: integer }
                observed_bar_seconds: { type: integer, nullable: true }
                declared_bar_seconds: { type: integer, nullable: true }
                timeframe_ok: { type: boolean, nullable: true }
            validation:
              type: object
              description: Backward-compatible alias of validation_summary (identical content; may be deprecated in future).
              properties:
                symbol: { type: string }
                data_hash: { type: string }
                counters:
                  $ref: '#/components/schemas/AnomalyCounters'
                unexpected_gaps: { type: integer }
                expected_closures: { type: integer }
                observed_bar_seconds: { type: integer, nullable: true }
                declared_bar_seconds: { type: integer, nullable: true }
                timeframe_ok: { type: boolean, nullable: true }
            anomaly_counters:
              $ref: '#/components/schemas/AnomalyCounters'
              description: Present when include_anomalies=true; mirrors anomaly counters from dataset metadata (empty object if none recorded).
    ArtifactManifest:
      description: NVDA extension adding dataset provenance fields to base ArtifactManifest.
      allOf:
        - $ref: '../../001-initial-dual-tier/contracts/openapi.yaml#/components/schemas/ArtifactManifest'
        - type: object
          description: Extends base ArtifactManifest with dataset provenance linkage (data_hash, calendar_id).
          properties:
            data_hash:
              type: string
              description: Added for explicit dataset provenance linkage.
            calendar_id:
              type: string
              description: Exchange calendar identifier.
    ValidationSummary:
      type: object
      description: Complete validation details available in validation.json artifact.
      properties:
        symbol: { type: string }
        data_hash: { type: string }
        events:
          type: array
          items:
            type: object
            properties:
              type: { type: string }
              count: { type: integer }
              sample:
                type: array
                items: { type: integer, format: int64 }
              resolution: { type: string }
        counters:
          $ref: '#/components/schemas/AnomalyCounters'
        expected_closures: { type: integer }
        unexpected_gaps: { type: integer }
        generated_at: { type: integer, format: int64 }
        observed_bar_seconds: { type: integer, nullable: true }
        declared_bar_seconds: { type: integer, nullable: true }
        timeframe_ok: { type: boolean, nullable: true }
    AnomalyCounters:
      type: object
      description: Keyed anomaly and integrity counters arising from dataset normalization.
      additionalProperties:
        type: integer
      example:
        duplicates_dropped: 0
        rows_dropped_missing: 3
        zero_volume_rows: 0
        future_rows_dropped: 0
        unexpected_gaps: 1
        expected_closures: 120
  