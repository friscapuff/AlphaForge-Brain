name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'

      - name: Assert Python version
        run: |
          PYV=$(python -c "import sys;print('.'.join(map(str,sys.version_info[:3])))")
          echo "Detected Python $PYV"
            case "$PYV" in
              3.11.*) echo "Python version OK" ;;
              *) echo "Unexpected Python version: $PYV (expected 3.11.x)" && exit 1 ;;
            esac

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Poetry install
        run: |
          poetry install --no-interaction --no-root

      - name: Lock checksum verify
        run: |
          python scripts/env/check_env.py --strict --dev | tee env_check.json
        env:
          POETRY_ACTIVE: '1'

      - name: Run tests (fail on warnings + coverage)
        env:
          PYTHONWARNINGS: error::UserWarning
        run: |
          poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing -q --disable-warnings

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Type check
        run: |
          poetry run mypy src

      - name: Mypy snapshot (src)
        run: |
          poetry run python scripts/typing/snapshot_mypy.py --output .mypy_snapshot_src.json --paths src || true
          echo "Snapshot error_count=$(jq '.error_count' .mypy_snapshot_src.json)"

      - name: Enforce zero mypy regression (src)
        run: |
          ec=$(jq '.error_count' .mypy_snapshot_src.json)
          if [ "$ec" != "0" ]; then
            echo "Mypy regression: expected 0 errors, found $ec";
            cat .mypy_snapshot_src.json;
            exit 1;
          fi
        shell: bash

      - name: Mypy diff report (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # Attempt to fetch base snapshot artifact (if stored) - placeholder logic
          BASE_SNAPSHOT=.mypy_base.json
          echo '{"error_count":0,"errors":[]}' > $BASE_SNAPSHOT
          poetry run python scripts/typing/diff_mypy.py --base $BASE_SNAPSHOT --new .mypy_snapshot_src.json --out mypy_diff.md || echo "Diff indicates regression"
          cat mypy_diff.md
      - name: Upload mypy diff artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: mypy-diff
          path: mypy_diff.md

      - name: Typing & lint timing
        run: |
          poetry run python scripts/typing/timing_report.py --out-json typing_timing.json --out-md typing_timing.md
      - name: Upload timing artifact
        uses: actions/upload-artifact@v4
        with:
          name: typing-timing
          path: |
            typing_timing.json
            typing_timing.md

      - name: Lint & format check
        run: |
          poetry run ruff check .
          poetry run ruff format --check . || (echo "Run 'ruff format .' locally" && exit 1)

      - name: Install Node (for Spectral)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install spec tooling (npm ci)
        run: npm ci --no-audit --no-fund

      - name: Lint & bundle OpenAPI
        run: |
          npm run check:api

      - name: Generate Redoc HTML
        run: |
          npm run docs:api

      - name: Generate dereferenced spec
        run: |
          npm run deref:api

      - name: Version sync check
        run: |
          poetry run python scripts/ci/check_version_sync.py

      - name: Upload OpenAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: |
            specs/001-initial-dual-tier/contracts/openapi.yaml
            openapi.json
            openapi.deref.json
            openapi.html

      - name: Enforce spec changelog entry
        if: github.event_name == 'pull_request'
        run: |
          poetry run python scripts/contract/ensure_changelog.py --spec specs/001-initial-dual-tier/contracts/openapi.yaml --base origin/main

      - name: Enforce constitution changelog entry
        if: github.event_name == 'pull_request'
        run: |
          poetry run python scripts/changelog/enforce_constitution_fragment.py

      - name: Upload env check artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-check
          path: env_check.json

  benchmark:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Assert Python version
        run: |
          PYV=$(python -c "import sys;print('.'.join(map(str,sys.version_info[:3])))")
          echo "Detected Python $PYV"
            case "$PYV" in
              3.11.*) echo "Python version OK" ;;
              *) echo "Unexpected Python version: $PYV (expected 3.11.x)" && exit 1 ;;
            esac
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run micro benchmark
        run: |
          poetry run python scripts/bench/perf_run.py --iterations 3 --json benchmark.json || echo "Benchmark non-blocking failure"
      - name: Upload benchmark
        uses: actions/upload-artifact@v4
        with:
          name: perf-benchmark
          path: benchmark.json

  ingestion-baseline:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            version: 1.8.3
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Dataset presence
        id: dataset
        run: |
          poetry run python scripts/bench/check_dataset_presence.py --symbol NVDA --timeframe 1d --out dataset_presence.json || exit_code=$?; \
          echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT; \
          cat dataset_presence.json
      - name: Upload dataset presence
        uses: actions/upload-artifact@v4
        with:
          name: dataset-presence
          path: dataset_presence.json
      - name: Ingestion perf
        if: steps.dataset.outputs.exit_code == '0'
        run: |
          poetry run python scripts/bench/ingestion_perf.py --symbol NVDA --timeframe 1d --out-json current_ingestion.json
      - name: Baseline diff
        if: steps.dataset.outputs.exit_code == '0'
        run: |
          poetry run python scripts/bench/ingestion_baseline_diff.py benchmarks/baseline_ingestion_nvda_1d.json current_ingestion.json
      - name: Upload ingestion artifacts
        if: steps.dataset.outputs.exit_code == '0'
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-baseline
          path: |
            current_ingestion.json
            benchmarks/baseline_ingestion_nvda_1d.json

  ingestion-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps (no extras)
        run: poetry install --no-interaction --no-root
      - name: Ingestion smoke (NVDA slice)
        run: |
          poetry run python scripts/bench/ingestion_perf.py --symbol NVDA --timeframe 1d --limit 100 --out-json smoke_ingestion.json || exit 1
      - name: Upload smoke artifact
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-smoke
          path: smoke_ingestion.json
