name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Nightly at 06:00 UTC
    - cron: '0 6 * * *'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo status file SHA256
        run: |
          echo "Computing SHA-256 for alphaforge-brain/ARCH_MIGRATION_STATUS.md"
          python -c "import hashlib, pathlib; p=pathlib.Path('alphaforge-brain/ARCH_MIGRATION_STATUS.md'); print('ARCH_MIGRATION_STATUS_SHA256=', hashlib.sha256(p.read_bytes()).hexdigest())"
        shell: bash

      - name: "Guard: Block committed/generated artifacts"
        run: |
          echo "Checking for disallowed generated artifacts in repo..."
          set -euo pipefail
          patterns=(
            'coverage.xml'
            'typing_timing.json'
            'typing_timing.md'
            'mypy_baseline.txt'
            'mypy_final.txt'
            'mypy_diff.md'
            'diff_test.md'
            'virt_report.json'
          )
          found=0
          for p in "${patterns[@]}"; do
            if git ls-files --error-unmatch "$p" >/dev/null 2>&1; then
              echo "Disallowed artifact tracked in git: $p" >&2
              found=1
            fi
            if [ -e "$p" ]; then
              echo "Note: artifact present in working tree (ok if untracked): $p"
            fi
          done
          # Also block patternized files that might have slipped in
          # base-*.yaml and head-*.json
          for f in $(git ls-files 'base-*.yaml' 'head-*.json' 2>/dev/null || true); do
            echo "Disallowed artifact tracked in git: $f" >&2
            found=1
          done
          if [ "$found" = "1" ]; then
            echo "CI guard failure: remove generated artifacts from VCS." >&2
            exit 1
          fi
        shell: bash

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'

      - name: Assert Python version
        run: |
          PYV=$(python -c "import sys;print('.'.join(map(str,sys.version_info[:3])))")
          echo "Detected Python $PYV"
            case "$PYV" in
              3.11.*) echo "Python version OK" ;;
              *) echo "Unexpected Python version: $PYV (expected 3.11.x)" && exit 1 ;;
            esac

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Poetry install
        run: |
          poetry install --no-interaction --no-root

      - name: Cross-root integrity check (Brain does not import Mind)
        run: |
          poetry run python scripts/ci/check_cross_root.py

      - name: Lock checksum verify
        run: |
          python scripts/env/check_env.py --strict --dev | tee env_check.json
        env:
          POETRY_ACTIVE: '1'

      - name: Run tests (fail on warnings + coverage)
        env:
          PYTHONWARNINGS: error::UserWarning
        run: |
          poetry run pytest --cov=alphaforge-brain/src --cov-report=xml --cov-report=term-missing -q --disable-warnings

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Type check
        run: |
          poetry run mypy alphaforge-brain/src

      - name: Mypy snapshot (brain src)
        run: |
          poetry run python scripts/typing/snapshot_mypy.py --output .mypy_snapshot_brain.json --paths alphaforge-brain/src || true
          echo "Snapshot error_count=$(jq '.error_count' .mypy_snapshot_brain.json)"

      - name: Enforce zero mypy regression (brain)
        run: |
          ec=$(jq '.error_count' .mypy_snapshot_brain.json)
          if [ "$ec" != "0" ]; then
            echo "Mypy regression: expected 0 errors, found $ec";
            cat .mypy_snapshot_brain.json;
            exit 1;
          fi
        shell: bash

      - name: Strict-plus mypy (allow-fail)
        continue-on-error: true
        run: |
          echo "Running strict-plus overlay (informational)."
          poetry run mypy --config-file mypy.strictplus.ini alphaforge-brain/src > .mypy_strictplus_output.txt || echo "Strict-plus reported issues (tolerated pre-promotion)"
          issues=$(grep -c ": error:" .mypy_strictplus_output.txt || true)
          echo "strictplus_error_count=$issues" >> $GITHUB_ENV
          head -n 25 .mypy_strictplus_output.txt | grep ": error:" || true > .mypy_strictplus_sample.txt
          echo "{\"mode\":\"strict-plus\",\"error_count\":$issues}" | jq '.' > .mypy_strictplus_summary.json
          echo "Strict-plus summary written ($issues errors)"
      - name: Upload strict-plus mypy artifact
        uses: actions/upload-artifact@v4
        with:
          name: mypy-strictplus
          path: |
            .mypy_strictplus_output.txt
            .mypy_strictplus_summary.json

      - name: Ruff strict-plus (allow-fail)
        continue-on-error: true
        run: |
          echo "Running ruff strict-plus overlay (informational)."
          poetry run ruff check --config ruff.strictplus.toml alphaforge-brain/src > .ruff_strictplus_output.txt || echo "Ruff strict-plus reported issues (tolerated pre-promotion)"
          ruff_issues=$(grep -E "^[^ ]+:[0-9]+:[0-9]+:" .ruff_strictplus_output.txt | wc -l | tr -d ' ')
          echo "strictplus_ruff_issue_count=$ruff_issues" >> $GITHUB_ENV
          head -n 25 .ruff_strictplus_output.txt | grep -E "^[^ ]+:[0-9]+:[0-9]+:" || true > .ruff_strictplus_sample.txt
          echo "{\"mode\":\"ruff-strict-plus\",\"violation_count\":$ruff_issues}" | jq '.' > .ruff_strictplus_summary.json
          echo "Ruff strict-plus summary written ($ruff_issues violations)"
      - name: Upload ruff strict-plus artifact
        uses: actions/upload-artifact@v4
        with:
          name: ruff-strictplus
          path: |
            .ruff_strictplus_output.txt
            .ruff_strictplus_summary.json

      - name: Append type hygiene metrics history (allow-fail)
        continue-on-error: true
        run: |
          base_errors=$(jq '.error_count' .mypy_snapshot_brain.json 2>/dev/null || echo 0)
          poetry run python scripts/type_hygiene/ci_append_metrics.py \
            --baseline-errors ${base_errors:-0} \
            --strictplus-errors ${strictplus_error_count:-0} \
            --strictplus-ruff-violations ${strictplus_ruff_issue_count:-0}

      - name: Strict-plus ratchet (fail on regression)
        if: github.event_name == 'pull_request'
        run: |
          echo "Evaluating strict-plus ratchet versus main..."
          # Fetch main to compare
          git fetch origin main:refs/remotes/origin/main --depth=1
          # Get last metrics entry strict-plus error count on main (best-effort)
          mkdir -p /tmp/main_ref
          git show origin/main:zz_artifacts/type_hygiene/metrics_history.json > /tmp/main_ref/metrics_history.json 2>/dev/null || echo '[]' > /tmp/main_ref/metrics_history.json
          main_strict=$(jq '[.[] | select(.strictplus_errors!=null)] | last.strictplus_errors' /tmp/main_ref/metrics_history.json 2>/dev/null || echo null)
          if [ "$main_strict" = "null" ]; then
            echo "No strict-plus baseline on main; ratchet passes (bootstrap phase).";
            exit 0;
          fi
          pr_strict=${strictplus_error_count:-0}
          echo "main strict-plus errors: $main_strict";
            echo "PR   strict-plus errors: $pr_strict";
          if [ "$pr_strict" -gt "$main_strict" ]; then
            echo "Regression: strict-plus error count increased ($pr_strict > $main_strict)";
            exit 1;
          fi
          echo "Ratchet OK (no increase)."

      - name: Mypy diff report (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # Attempt to fetch base snapshot artifact (if stored) - placeholder logic
          BASE_SNAPSHOT=.mypy_base.json
          echo '{"error_count":0,"errors":[]}' > $BASE_SNAPSHOT
          poetry run python scripts/typing/diff_mypy.py --base $BASE_SNAPSHOT --new .mypy_snapshot_brain.json --out mypy_diff.md || echo "Diff indicates regression"
          cat mypy_diff.md
      - name: Upload mypy diff artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: mypy-diff
          path: mypy_diff.md

      - name: Typing & lint timing
        run: |
          poetry run python scripts/typing/timing_report.py --out-json typing_timing.json --out-md typing_timing.md
      - name: Upload timing artifact
        uses: actions/upload-artifact@v4
        with:
          name: typing-timing
          path: |
            typing_timing.json
            typing_timing.md

      - name: Lint & format check
        run: |
          poetry run ruff check .
          poetry run ruff format --check . || (echo "Run 'ruff format .' locally" && exit 1)

      - name: Install Node (for Spectral)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install spec tooling (npm ci)
        run: npm ci --no-audit --no-fund

      - name: Lint & bundle OpenAPI
        run: |
          npm run check:api

      - name: Generate Redoc HTML
        run: |
          npm run docs:api

      - name: Generate dereferenced spec
        run: |
          npm run deref:api

      - name: Version sync check
        run: |
          poetry run python scripts/ci/check_version_sync.py

      - name: Verify migrations HEAD checksum
        run: |
          poetry run python scripts/ci/check_migrations_head.py

      - name: Upload OpenAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: |
            specs/001-initial-dual-tier/contracts/openapi.yaml
            openapi.json
            openapi.deref.json
            openapi.html

      - name: Dump SQLite schema (artifact)
        run: |
          poetry run python alphaforge-brain/scripts/ci/dump_schema.py --out zz_artifacts/schema.sql
      - name: Upload schema artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlite-schema
          path: zz_artifacts/schema.sql

      - name: Enforce spec changelog entry
        if: github.event_name == 'pull_request'
        run: |
          poetry run python scripts/contract/ensure_changelog.py --spec specs/001-initial-dual-tier/contracts/openapi.yaml --base origin/main

      - name: Enforce constitution changelog entry
        if: github.event_name == 'pull_request'
        run: |
          poetry run python scripts/changelog/enforce_constitution_fragment.py

      - name: Bootstrap CI width gate (STRICT)
        env:
          BOOT_CI_WIDTH_MAX: "0.05"
          BOOT_CI_MODE: "STRICT"
        run: |
          # Attempt to locate most recent run artifacts directory under ./artifacts
          # For this repository, artifacts are written under the default root unless overridden.
          # Best-effort discovery: pick the newest directory under artifacts/ that contains validation.json
          set -euo pipefail
          root="artifacts"
          if [ ! -d "$root" ]; then
            echo "No artifacts directory found; skipping CI width gate (no validation.json)." ; exit 0
          fi
          latest=""
          for d in $(find "$root" -maxdepth 1 -mindepth 1 -type d | sort); do
            if [ -f "$d/validation.json" ]; then latest="$d"; fi
          done
          if [ -z "$latest" ]; then
            echo "No validation.json found; skipping CI width gate." ; exit 0
          fi
          echo "Running CI width gate on $latest"
          poetry run python alphaforge-brain/scripts/ci/bootstrap_ci_width_gate.py "$latest"

      - name: Upload env check artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-check
          path: env_check.json

  quality-gates:
    # Aggregated determinism, contract drift, migrations head, memory cap, cross-root integrity
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run unified quality gates (T020)
        run: |
          poetry run python scripts/ci/run_quality_gates.py
      - name: Upload quality gates summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates
          path: zz_artifacts/quality_gates_summary.json

  perf-gates:
    # Aggregated performance thresholds (FR-113 / T020a)
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run performance gates (T020a)
        run: |
          poetry run python scripts/ci/run_perf_gates.py
      - name: Upload performance gates summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-gates
          path: zz_artifacts/perf_gates_summary.json

  benchmark:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Assert Python version
        run: |
          PYV=$(python -c "import sys;print('.'.join(map(str,sys.version_info[:3])))")
          echo "Detected Python $PYV"
            case "$PYV" in
              3.11.*) echo "Python version OK" ;;
              *) echo "Unexpected Python version: $PYV (expected 3.11.x)" && exit 1 ;;
            esac
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run micro benchmark
        run: |
          poetry run python scripts/bench/perf_run.py --iterations 3 --json benchmark.json || echo "Benchmark non-blocking failure"
      - name: Upload benchmark
        uses: actions/upload-artifact@v4
        with:
          name: perf-benchmark
          path: benchmark.json

  observability-overhead:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Observability overhead (allow-fail on PR)
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          poetry run python alphaforge-brain/scripts/bench/observability_overhead.py --rows 200000 --repeat 3 --threshold 0.03 | tee bench_overhead_pr.txt
      - name: Observability overhead (strict on schedule)
        if: github.event_name == 'schedule'
        run: |
          poetry run python alphaforge-brain/scripts/bench/observability_overhead.py --rows 200000 --repeat 3 --threshold 0.03 | tee bench_overhead_nightly.txt
      - name: Upload observability overhead artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: observability-overhead
          path: |
            bench_overhead_pr.txt
            bench_overhead_nightly.txt
          if-no-files-found: ignore

  ingestion-baseline:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
            version: 1.8.3
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Dataset presence
        id: dataset
        run: |
          poetry run python scripts/bench/check_dataset_presence.py --symbol NVDA --timeframe 1d --out dataset_presence.json || exit_code=$?; \
          echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT; \
          cat dataset_presence.json
      - name: Upload dataset presence
        uses: actions/upload-artifact@v4
        with:
          name: dataset-presence
          path: dataset_presence.json
      - name: Ingestion perf
        if: steps.dataset.outputs.exit_code == '0'
        run: |
          poetry run python scripts/bench/ingestion_perf.py --symbol NVDA --timeframe 1d --out-json current_ingestion.json
      - name: Baseline diff
        if: steps.dataset.outputs.exit_code == '0'
        run: |
          poetry run python scripts/bench/ingestion_baseline_diff.py benchmarks/baseline_ingestion_nvda_1d.json current_ingestion.json
      - name: Upload ingestion artifacts
        if: steps.dataset.outputs.exit_code == '0'
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-baseline
          path: |
            current_ingestion.json
            benchmarks/baseline_ingestion_nvda_1d.json

  ingestion-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps (no extras)
        run: poetry install --no-interaction --no-root
      - name: Ingestion smoke (NVDA slice)
        run: |
          poetry run python scripts/bench/ingestion_perf.py --symbol NVDA --timeframe 1d --limit 100 --out-json smoke_ingestion.json || exit 1
      - name: Upload smoke artifact
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-smoke
          path: smoke_ingestion.json

  migration-parity:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Verify post-move parity (allow-fail)
        continue-on-error: true
        run: |
          poetry run python scripts/migration/verify_post_move.py || true
      - name: Upload parity artifact (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-parity
          path: |
            zz_artifacts/migration_verification.json

  determinism-replay:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run determinism replay (FR-151)
        run: |
          poetry run python alphaforge-brain/scripts/ci/determinism_replay.py --out zz_artifacts/determinism_replay.json
      - name: Upload determinism replay artifact
        uses: actions/upload-artifact@v4
        with:
          name: determinism-replay
          path: zz_artifacts/determinism_replay.json

  determinism-stub:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Determinism CI stub (T002)
        run: |
          poetry run python alphaforge-brain/scripts/ci/stubs/determinism_stub.py zz_artifacts/determinism_stub.json
      - name: Upload determinism stub
        uses: actions/upload-artifact@v4
        with:
          name: determinism-stub
          path: zz_artifacts/determinism_stub.json

  stress-sweep-stub:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Stress sweep CI stub (T002)
        run: |
          poetry run python alphaforge-brain/scripts/ci/stubs/stress_sweep_stub.py zz_artifacts/stress_stub.json
      - name: Upload stress sweep stub
        uses: actions/upload-artifact@v4
        with:
          name: stress-sweep-stub
          path: zz_artifacts/stress_stub.json

  memory-cap-stub:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Memory cap CI stub (T002)
        run: |
          poetry run python alphaforge-brain/scripts/ci/stubs/memory_cap_stub.py zz_artifacts/memory_cap_stub.json
      - name: Upload memory cap stub
        uses: actions/upload-artifact@v4
        with:
          name: memory-cap-stub
          path: zz_artifacts/memory_cap_stub.json

  acceptance-suite:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run acceptance suite
        env:
          BOOT_CI_WIDTH_MAX: "0.05"
          BOOT_CI_MODE: "STRICT"
        run: |
          poetry run python alphaforge-brain/scripts/ci/acceptance_suite.py --artifacts-root artifacts --out zz_artifacts/acceptance_summary.json
      - name: Upload acceptance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-suite
          path: zz_artifacts/acceptance_summary.json

  stress-tests:
    # Dedicated job to run stress-marked tests (longer runtime, optional on PR, required nightly)
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'
          cache: 'poetry'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: Run stress tests (allow-fail on PR)
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        env:
          PYTHONWARNINGS: error::UserWarning
        run: |
          poetry run pytest -m stress -q --disable-warnings --maxfail=1 || echo "Stress suite failures (non-blocking on PR)"
      - name: Upload stress junit (if any)
        if: always()
        run: |
          # Re-run with junitxml output only if initial run passed to limit time; skipped if failing scenario already captured.
          if [ ! -f stress-junit.xml ]; then
            poetry run pytest -m stress -q --disable-warnings --maxfail=1 --junitxml=stress-junit.xml || true
          fi
      - name: Upload stress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stress-tests
          path: |
            stress-junit.xml
